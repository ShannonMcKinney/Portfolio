import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.imageio.ImageIO;
import javax.swing.*;

public class drawLines extends JFrame implements ActionListener{

	public int xsize, ysize;
	//public int timerCount = -1000000000;
	
	public drawLines() {
		
		super("Random Lines");
		
		setSize(1400, 1048);
		setVisible(true);
		
		Timer timer = new Timer(100, this);
		timer.start();
		
		
		
	}
	
	
	public void paint(Graphics g) {
		
		super.paint(g);
		int count = 0;
		int x, y, x2, y2;
		
		while(count<=100) {
			
			x =  (int)(Math.random()*xsize);
			y =  (int)(Math.random()*ysize);
			x2 = (int)(Math.random()*xsize);
			y2 = (int)(Math.random()*ysize);
			
			
			g.setColor(new Color(((int)(Math.random()*256)), ((int)(Math.random()*256)), ((int)(Math.random()*256))));
			
			g.drawLine(x, y, x2, y2);
		
			count++;
			
			
		}
		System.out.println("lines");
		
		
		/*if(timerCount%1000000000 == 0) {
			scare();
			timerCount =-1000000000;
		}
		
		timerCount++;
		/*Graphics g = null;
		
		setSize(1048, 1400);
		setVisible(true);
		
		Timer timer = new Timer(100000, this);
		timer.start();*/
	
	
	}

	
	public void scare() {
		MyJPanel s = new MyJPanel();
		//Timer timer1 = new Timer(100000, this);
		//timer1.start();
		
		
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				s.setVisible(true);
				
			}
		});
		System.out.println("scare");
		s.setVisible(false);
		
	}
	
	public void actionPerformed(ActionEvent e) {
		
		xsize = xsizing();
		ysize = ysizing();
		
		
		this.resize(xsize, ysize);
		setLocation(((int)((Math.random()*1048))), ((int)((Math.random()*1400))));
		repaint();
		
		if(((int)((Math.random()*100)))== 11) {
			
			scare();
		}
		
	}
	
	public int xsizing() {
		
		int xsize;
		xsize = (int)(Math.random()*1048);
		
		return xsize;	
	}
	
	public int ysizing() {
		
		int ysize;
		ysize = (int)(Math.random()*1400);
		
		return ysize;	
	}
	
	
	
	public static void main(String[] args) {
		
		
		drawLines application = new drawLines();
		application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	}

	
	//class to display an ImageIcon on a panel
	class MyJPanel extends JPanel {
		
		private ImageIcon imageIcon;
		private String[] images = {"Batman.png", "Bird.png", "Fireworks.png", 
				"heart.png", "Sunflower.png"};
		
		//load image
		public MyJPanel() {
			
			try {
				imageIcon = new ImageIcon( ImageIO.read(getClass().getResource(images[0])));
			}
			catch(Exception e) {}
			
		}
		
		//display imageIcon on panel
		public void paintComponent( Graphics g) {
			
			//call superclass paintComponent method
			super.paintComponent(g);
			
			//display icon
			imageIcon.paintIcon(this, g, 0, 0);
			
		}
	}
}
